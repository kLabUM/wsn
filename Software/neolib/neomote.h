/* ========================================
 *
 * Copyright Metronome Systems, 2013
 * All Rights Reserved
 *
 * CONFIDENTIAL AND PROPRIETARY INFORMATION
 * WHICH IS THE PROPERTY OF Metronome Systems 2013.
 *
 * neomote.h -
 * This API file is required for any access to the wireless and real time
 * clock capabilities of the NeoMote.
 *
 * spister@metronomesystems.com
 * ========================================
*/

/////////////////////////////////////////////////////////////////////////////
//       TO ENSURE FUNCTIONALITY OF THE API, DO NOT EDIT THIS FILE.        //
/////////////////////////////////////////////////////////////////////////////
//================================RTC API==================================//
#include <project.h>
/*========================================
*
* Public Real Time Clock Defines
*
* ========================================
*/
// Alarm Definitions.
#define RTC_SECOND_ALARM 0
#define RTC_MINUTE_ALARM 1

//mote status definitions
#define STATUS_MOTE_SERIAL_BUSY 1
#define STATUS_MOTE_PACKET_READY 2
#define STATUS_UPDATE_MOTE_STATE 3
#define STATUS_MOTE_HAS_PACKET_IN_QUEUE 3

// RTC Date/Time Struct.
typedef struct
{
  uint8 second;
  uint8 minute;
  uint8 hour;
  uint8 day;
  uint8 weekday;
  uint8 month;
  uint16 year;
} NeoRtcTimeStruct;

/*========================================
*
* Public Real Time Clock Prototypes
*
* ========================================
*/
void  NeoRTC_Start(void(*RespCommand)(uint8 event));
void  NeoRTC_Sleep();
void  NeoRTC_Wakeup();
uint8 NeoRTC_Process_Tasks();
void  NeoRTC_Set_Repeating_Minute_Alarm(uint8 interval);
void  NeoRTC_Enable_Second_Interrupt();
void  NeoRTC_Disable_Second_Interrupt();
void  NeoRTC_WriteTime(NeoRtcTimeStruct neoTime);
void  NeoRTC_WriteTimeUtc(uint32 utcSec);
NeoRtcTimeStruct NeoRTC_Read_Time();

//==========================MOTE API========================================//

/*========================================
*
* Public Mote Defines
*
* ========================================
*/
// TYPE Defintions.
#define TYPE_MOTE_EVENT         0x0
#define TYPE_MOTE_DATA          0x1

// Status Defintions.
#define EVENT_HARDWARE_ERROR   0x00
#define EVENT_MOTE_OPERATIONAL 0x01

// State Definitions.
#define STATE_MOTE_IDLE        0x0
#define STATE_MOTE_SEARCHING   0x1
#define STATE_MOTE_OPERATIONAL 0x2

// Mote Notification Struct.
typedef struct
{
  uint8 type;
  uint8 payload[80];
} NeoMoteNotification;

/*========================================
*
* Public Mote Prototypes
*
* ========================================
*/
void  Mote_Start(void (*callBack)(NeoMoteNotification notif));
void  Mote_Reset();
void  Mote_Sleep();
void  Mote_Wakeup();
uint8 Mote_Process_Tasks();
uint8 Mote_Send_Packet(uint8 *packetData, uint8 len);
uint8 Mote_Hardware_Busy();
uint8 Mote_Get_State();